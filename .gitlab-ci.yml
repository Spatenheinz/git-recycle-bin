stages:
  - test
  - demos
  - deploy

variables:
  NIX_PATH: "nixpkgs=channel:nixos-24.05"

default:
  tags:
    - csfw-minion

usage:
  stage: test
  script:
    - nix-shell --pure --run "git_recycle_bin.py --help"
    - nix-shell --pure --run "just --list"

unittest:
  stage: test
  script:
    - nix-shell --pure --run "just unittest"
    - curl -Os https://uploader.codecov.io/latest/linux/codecov
    - chmod +x codecov
    - ./codecov -t ${CODECOV_TOKEN} -r ArtifactLabs/git-recycle-bin -f coverage.xml

pip_install:
  stage: test
  image: python:3.11
  script:
    - pip install .
    - pip install pytest
    - PYTHONPATH=$PWD:$PWD/src pytest
    - git_recycle_bin.py --help

demo_help:
  stage: demos
  script:
    - nix-shell --pure --run "just demo0"

demo_push:
  stage: demos
  script:
    - nix-shell --pure --run "just push::$DEMO"
  parallel:
    matrix:
      - DEMO:
        - demo1
        - demo1_quiet
        - demo1_verbose
        - demo1_vverbose
        - demo2
        - demo3
        - demo4
        - demo5

demo_push_note:
  stage: demos
  script:
    # Ensure we got origin remote via ssh -- avoid trouble/leaks with https tokens
    - git remote -vv
    - aux/git_add_ssh_remote.sh origin  # Create new 'origin_ssh'. 'origin' may be https
    - git remote remove origin
    - git remote rename origin_ssh origin
    - git remote -vv

    # This will actually push a note to src remote, so it is not local-only!
    # Not --pure so as to use host system's ssh client
    - nix-shell --run "just push::demo6_note"


demo_clean:
  stage: demos
  script:
    - nix-shell --pure --run "just clean::$DEMO"
  parallel:
    matrix:
      - DEMO:
        - demo1

demo_list:
  stage: demos
  script:
    - nix-shell --pure --run "just list::$DEMO"
  parallel:
    matrix:
      - DEMO:
        - demo1
        - demo2
        - demo3
        - demo4

demo_download:
  stage: demos
  script:
    - nix-shell --pure --run "just download::$DEMO"
  parallel:
    matrix:
      - DEMO:
        - demo1

lint_shell:
  stage: test
  script:
    - nix-shell --pure --run "just lint-shell"
  allow_failure: true

lint_md:
  stage: test
  script:
    - nix-shell --pure --run "just lint-md"
  allow_failure: true

docs_lint:
  stage: test
  script:
    - nix-shell --pure --run "just docs-lint"

pages:
  stage: deploy
  script:
    - nix-shell --pure --run "just docs"
  artifacts:
    paths:
      - docs/_build/html
  only:
    - master
